import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_timer/bloc/bloc.dart';import 'package:flutter_timer/ui/background.dart';import 'package:flutter_timer/ui/timer_actions.dart';class Timer extends StatelessWidget {  static const TextStyle timerTextStyle = TextStyle(    fontSize: 60,    fontWeight: FontWeight.bold,  );  // final initialTimer = Duration(seconds: 0, minutes: 1);  void _showTimePicker(context) {    TimerBloc timerBloc = BlocProvider.of<TimerBloc>(context);    showCupertinoModalPopup(        context: context,        builder: (_) {          return Container(            height: 500,            // color: Color.fromARGB(255, 255, 255, 255),            child: Column(              children: [                Container(                  height: 400,                  child: CupertinoTimerPicker(                    mode: CupertinoTimerPickerMode.ms,                    // initialTimerDuration: initialTimer,                    onTimerDurationChanged: (Duration changedTimer) {                      timerBloc.add(TimerChanged(duration: changedTimer));                    },                  ),                ),                // Close the modal                CupertinoButton(                  child: Text(                    'OK',                    style: TextStyle(color: Colors.white),                  ),                  onPressed: () => Navigator.of(context).pop(),                )              ],            ),          );        });  }  @override  Widget build(BuildContext context) {    return CupertinoPageScaffold(      navigationBar: CupertinoNavigationBar(middle: Text('Flutter Timer')),      child: Stack(        children: [          Background(),          Column(            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.center,            children: <Widget>[              Padding(                padding: EdgeInsets.symmetric(vertical: 100.0),                child: Center(                  child: BlocBuilder<TimerBloc, TimerState>(                    builder: (context, state) {                      final String secondsStr =                      (state.duration.inSeconds % 60).floor().toString().padLeft(2, '0');                      return GestureDetector(                        onTap: () {                          if (state is TimerRunInProgress || state is TimerRunPause) {                          } else {                            print(state);                            _showTimePicker(context);                          }                        },                        child: Container(                            child: Text(                          '${state.duration.inMinutes}:$secondsStr',                          style: Timer.timerTextStyle,                        )),                      );                    },                  ),                ),              ),              BlocBuilder<TimerBloc, TimerState>(                buildWhen: (previousState, currentState) =>                    currentState.runtimeType != previousState.runtimeType,                builder: (context, state) => TimerActions(),              ),            ],          ),        ],      ),    );  }}